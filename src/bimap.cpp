#include "abstraction.h"
#include <utility>

using namespace std;
using Byte = uint8_t;

//instruction_opcode_map
const boost::bimap<Operation, Byte>& construct_bimap() {
	static const boost::bimap<Operation, Byte> bimap = [] {
		boost::bimap< pair<string, TokenType>, Byte> bm;
		bm.insert({ {"ADC", IMMEDIATE}, INS_ADC_IM });
		bm.insert({ {"ADC", ZERO_PAGE}, INS_ADC_ZP });
		bm.insert({ {"ADC", X_ZERO_PAGE}, INS_ADC_ZPX });
		bm.insert({ {"ADC", ABSOLUTE_RELATIVE}, INS_ADC_ABS });
		bm.insert({ {"ADC", X_ABSOLUTE}, INS_ADC_ABS });
		bm.insert({ {"ADC", Y_ABSOLUTE}, INS_ADC_ABSY });
		bm.insert({ {"ADC", X_INDEX_ZP_INDIRECT}, INS_ADC_INDX });
		bm.insert({ {"ADC", ZP_INDIRECT_Y_INDEX}, INS_ADC_INDY });
		bm.insert({ {"AND", IMMEDIATE}, INS_AND_IM });
		bm.insert({ {"AND", ZERO_PAGE}, INS_AND_ZP });
		bm.insert({ {"AND", X_ZERO_PAGE}, INS_AND_ZPX });
		bm.insert({ {"AND", ABSOLUTE_RELATIVE}, INS_AND_ABS });
		bm.insert({ {"AND", X_ABSOLUTE}, INS_AND_ABSX });
		bm.insert({ {"AND", Y_ABSOLUTE}, INS_AND_ABSY });
		bm.insert({ {"AND", X_INDEX_ZP_INDIRECT}, INS_AND_INDX });
		bm.insert({ {"AND", ZP_INDIRECT_Y_INDEX}, INS_AND_INDY });
		bm.insert({ {"ASL", ACCUMULATOR}, INS_ASL_ACC });
		bm.insert({ {"ASL", ZERO_PAGE}, INS_ASL_ZP });
		bm.insert({ {"ASL", X_ZERO_PAGE}, INS_ASL_ABSX });
		bm.insert({ {"ASL", ABSOLUTE_RELATIVE}, INS_ASL_ABS });
		bm.insert({ {"BCC", ABSOLUTE_RELATIVE}, INS_BCC });
		bm.insert({ {"BCS", ABSOLUTE_RELATIVE}, INS_BCS });
		bm.insert({ {"BEQ", ABSOLUTE_RELATIVE}, INS_BEQ });
		bm.insert({ {"BIT", ZERO_PAGE}, INS_BIT_ZP });
		bm.insert({ {"BIT", ABSOLUTE_RELATIVE}, INS_BIT_ABS });
		bm.insert({ {"BMI", ABSOLUTE_RELATIVE}, INS_BMI });
		bm.insert({ {"BNE", ABSOLUTE_RELATIVE}, INS_BNE });
		bm.insert({ {"BPL", ABSOLUTE_RELATIVE}, INS_BPL });
        bm.insert({ {"BRK", IMPLIED }, INS_BRK });
        bm.insert({ {"BVS", ABSOLUTE_RELATIVE}, INS_BVS });
        bm.insert({ {"CLC", IMPLIED}, INS_CLC });
        bm.insert({ {"CLD", IMPLIED}, INS_CLD });
        bm.insert({ {"CLI", IMPLIED}, INS_CLI });
        bm.insert({ {"CLV", IMPLIED}, INS_CLV });
        bm.insert({ {"CPX", IMMEDIATE}, INS_CPX_IM });
        bm.insert({ {"CPX", ZERO_PAGE}, INS_CPX_ZP });
        bm.insert({ {"CPX", ABSOLUTE_RELATIVE}, INS_CPX_ABS });
        bm.insert({ {"CPY", IMMEDIATE}, INS_CPX_IM });
        bm.insert({ {"CPY", ZERO_PAGE}, INS_CPX_ZP });
        bm.insert({ {"CPY", ABSOLUTE_RELATIVE}, INS_CPX_ABS });
        bm.insert({ {"DEC", ZERO_PAGE}, INS_DEC_ZP });
        bm.insert({ {"DEC", X_ZERO_PAGE}, INS_DEC_ZPX });
        bm.insert({ {"DEC", ABSOLUTE_RELATIVE}, INS_DEC_ABS });
        bm.insert({ {"DEC", X_ABSOLUTE}, INS_DEC_ABSX });
        bm.insert({ {"DEX", IMPLIED}, INS_DEX });
        bm.insert({ {"DEY", IMPLIED}, INS_DEY });
        bm.insert({ {"EOR", IMMEDIATE}, INS_EOR_IM });
        bm.insert({ {"EOR", ZERO_PAGE}, INS_EOR_ZP });
        bm.insert({ {"EOR", X_ZERO_PAGE}, INS_EOR_ZPX });
        bm.insert({ {"EOR", ABSOLUTE_RELATIVE}, INS_EOR_ABS });
        bm.insert({ {"EOR", X_ABSOLUTE}, INS_EOR_ABSX });
        bm.insert({ {"EOR", Y_ABSOLUTE}, INS_EOR_ABSY });
        bm.insert({ {"EOR", X_INDEX_ZP_INDIRECT}, INS_EOR_INDX });
        bm.insert({ {"EOR", ZP_INDIRECT_Y_INDEX}, INS_EOR_INDY });
        bm.insert({ {"INC", ZERO_PAGE}, INS_INC_ZP });
        bm.insert({ {"INC", X_ZERO_PAGE}, INS_INC_ZPX });
        bm.insert({ {"INC", ABSOLUTE_RELATIVE}, INS_INC_ABS });
        bm.insert({ {"INC", X_ABSOLUTE}, INS_INC_ABSX });
        bm.insert({ {"INX", IMPLIED}, INS_INX });
        bm.insert({ {"INY", IMPLIED}, INS_INY });
        bm.insert({ {"JMP", ABSOLUTE_RELATIVE}, INS_JMP_ABS });
        bm.insert({ {"JMP", ABS_INDIRECT}, INS_JMP_IND });
        bm.insert({ {"JSR", ABSOLUTE_RELATIVE}, INS_JSR_ABS });
        bm.insert({ {"LDA", IMMEDIATE}, INS_LDA_IM });
        bm.insert({ {"LDA", ZERO_PAGE}, INS_LDA_ZP });
        bm.insert({ {"LDA", X_ZERO_PAGE}, INS_LDA_ZPX });
        bm.insert({ {"LDA", ABSOLUTE_RELATIVE}, INS_LDA_ABS });
        bm.insert({ {"LDA", X_ABSOLUTE}, INS_LDA_ABSX });
        bm.insert({ {"LDA", Y_ABSOLUTE}, INS_LDA_ABSY });
        bm.insert({ {"LDA", X_INDEX_ZP_INDIRECT}, INS_LDA_INDX });
        bm.insert({ {"LDA", ZP_INDIRECT_Y_INDEX}, INS_LDA_INDY });
        bm.insert({ {"LDX", IMMEDIATE}, INS_LDX_IM });
        bm.insert({ {"LDX", ZERO_PAGE}, INS_LDX_ZP });
        bm.insert({ {"LDX", Y_ZERO_PAGE}, INS_LDX_ZPY });
        bm.insert({ {"LDX", ABSOLUTE_RELATIVE}, INS_LDX_ABS });
        bm.insert({ {"LDX", Y_ABSOLUTE}, INS_LDX_ABSY });
        bm.insert({ {"LDY", IMMEDIATE}, INS_LDY_IM });
        bm.insert({ {"LDY", ZERO_PAGE}, INS_LDY_ZP });
        bm.insert({ {"LDY", X_ZERO_PAGE}, INS_LDY_ZPX });
        bm.insert({ {"LDY", ABSOLUTE_RELATIVE}, INS_LDY_ABS });
        bm.insert({ {"LDY", X_ABSOLUTE}, INS_LDY_ABSX });
        bm.insert({ {"LSR", ACCUMULATOR}, INS_LSR_ACC });
        bm.insert({ {"LSR", ZERO_PAGE}, INS_LSR_ZP });
        bm.insert({ {"LSR", X_ZERO_PAGE}, INS_LSR_ZPX });
        bm.insert({ {"LSR", ABSOLUTE_RELATIVE}, INS_LSR_ABS });
        bm.insert({ {"LSR", X_ABSOLUTE}, INS_LSR_ABSX });
        bm.insert({ {"NOP", IMPLIED}, INS_NOP });
        bm.insert({ {"ORA", IMMEDIATE}, INS_ORA_IM });
        bm.insert({ {"ORA", ZERO_PAGE}, INS_ORA_ZP });
        bm.insert({ {"ORA", X_ZERO_PAGE}, INS_ORA_ZPX });
        bm.insert({ {"ORA", ABSOLUTE_RELATIVE}, INS_ORA_ABS });
        bm.insert({ {"ORA", X_ABSOLUTE}, INS_ORA_ABSX });
        bm.insert({ {"ORA", Y_ABSOLUTE}, INS_ORA_ABSY });
        bm.insert({ {"ORA", X_INDEX_ZP_INDIRECT}, INS_ORA_INDX });
        bm.insert({ {"ORA", ZP_INDIRECT_Y_INDEX}, INS_ORA_INDY });
        bm.insert({ {"PHA", IMPLIED}, INS_PHA });
        bm.insert({ {"PHP", IMPLIED}, INS_PHP });
        bm.insert({ {"PLA", IMPLIED}, INS_PLA });
        bm.insert({ {"PLP", IMPLIED}, INS_PLP });
        bm.insert({ {"ROL", ACCUMULATOR}, INS_ROL_ACC });
        bm.insert({ {"ROL", ZERO_PAGE}, INS_ROL_ZP });
        bm.insert({ {"ROL", X_ZERO_PAGE}, INS_ROL_ZPX });
        bm.insert({ {"ROL", ABSOLUTE_RELATIVE}, INS_ROL_ABS });
        bm.insert({ {"ROL", X_ABSOLUTE}, INS_ROL_ABSX });
        bm.insert({ {"ROR", ACCUMULATOR}, INS_ROR_ACC });
        bm.insert({ {"ROR", ZERO_PAGE}, INS_ROR_ZP });
        bm.insert({ {"ROR", X_ZERO_PAGE}, INS_ROR_ZPX });
        bm.insert({ {"ROR", ABSOLUTE_RELATIVE}, INS_ROR_ABS });
        bm.insert({ {"ROR", X_ABSOLUTE}, INS_ROR_ABSX });
        bm.insert({ {"RTI", IMPLIED}, INS_RTI });
        bm.insert({ {"RTS", IMPLIED}, INS_RTS });
        bm.insert({ {"SBC", IMMEDIATE}, INS_SBC_IM });
        bm.insert({ {"SBC", ZERO_PAGE}, INS_SBC_ZP });
        bm.insert({ {"SBC", X_ZERO_PAGE}, INS_SBC_ZPX });
        bm.insert({ {"SBC", ABSOLUTE_RELATIVE}, INS_SBC_ABS });
        bm.insert({ {"SBC", X_ABSOLUTE}, INS_SBC_ABSX });
        bm.insert({ {"SBC", Y_ABSOLUTE}, INS_SBC_ABSY });
        bm.insert({ {"SBC", X_INDEX_ZP_INDIRECT}, INS_SBC_INDX });
        bm.insert({ {"SBC", ZP_INDIRECT_Y_INDEX}, INS_SBC_INDY });
        bm.insert({ {"SEC", IMPLIED}, INS_SEC });
        bm.insert({ {"SED", IMPLIED}, INS_SED });
        bm.insert({ {"SEI", IMPLIED}, INS_SEI });
        bm.insert({ {"STA", ZERO_PAGE}, INS_STA_ZP });
        bm.insert({ {"STA", X_ZERO_PAGE}, INS_STA_ZPX });
        bm.insert({ {"STA", ABSOLUTE_RELATIVE}, INS_STA_ABS });
        bm.insert({ {"STA", X_ABSOLUTE}, INS_STA_ABSX });
        bm.insert({ {"STA", Y_ABSOLUTE}, INS_STA_ABSY });
        bm.insert({ {"STA", X_INDEX_ZP_INDIRECT}, INS_STA_INDX });
        bm.insert({ {"STA", ZP_INDIRECT_Y_INDEX}, INS_STA_INDY });
        bm.insert({ {"STX", ZERO_PAGE}, INS_STX_ZP });
        bm.insert({ {"STX", Y_ZERO_PAGE}, INS_STX_ZPY });
        bm.insert({ {"STX", ABSOLUTE_RELATIVE}, INS_STX_ABS });
        bm.insert({ {"STY", ZERO_PAGE}, INS_STY_ZP });
        bm.insert({ {"STY", X_ZERO_PAGE}, INS_STY_ZPX });
        bm.insert({ {"STY", ABSOLUTE_RELATIVE}, INS_STY_ABS });
        bm.insert({ {"TAX", IMPLIED}, INS_TAX });
        bm.insert({ {"TAY", IMPLIED}, INS_TAY });
        bm.insert({ {"TSX", IMPLIED}, INS_TSX });
        bm.insert({ {"TXA", IMPLIED}, INS_TXA });
        bm.insert({ {"TXS", IMPLIED}, INS_TXS });
        bm.insert({ {"TYA", IMPLIED}, INS_TYA });
    }();
}